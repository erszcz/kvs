searchNodes=[{"doc":"A fail-fast interface to key-value lists.","ref":"kvs.html","title":"kvs","type":"module"},{"doc":"Unfolds a Proplist into a list of key-value pairs.Properties which are not pairs are substituted with pairs where the second element of each is true.The call fails with a function_clause if Proplist is not a list.Example: erl&gt; kvs:from_proplist([a, {b, 2}]). [{a,true},{b,2}] erl&gt; kvs:from_proplist(a). ** exception error: no function clause matching kvs:from_proplist(a) (/Users/erszcz/work/erszcz/kvs/src/kvs.erl, line 68)","ref":"kvs.html#from_proplist/1","title":"kvs.from_proplist/1","type":"function"},{"doc":"Returns the Value associated with Key if KVs contains Key.The call fails with a {badkey, Key} exception if no value is associated with Key, or with a function_clause if KVs is not a list.Example: erl&gt; kvs:get(a, [{a, 3}]). 3 erl&gt; kvs:get(z, [{a, 3}]). ** exception error: {badkey,z} in function kvs:get/2 called as kvs:get(z,[{a,3}])","ref":"kvs.html#get/2","title":"kvs.get/2","type":"function"},{"doc":"Returns Value associated with Key if KVs contains Key. If no value is associated with Key, Default is returned.The call fails with a function_clause if KVs is not a list.Example: erl&gt; kvs:get(a, [{a, &quot;Just a&quot;}], &quot;Default value&quot;). &quot;Just a&quot; erl&gt; kvs:get(z, [{a, &quot;Just a&quot;}], &quot;Default value&quot;). &quot;Default value&quot;","ref":"kvs.html#get/3","title":"kvs.get/3","type":"function"},{"doc":"Returns a map built from Proplist.The proplist is first unfolded, i.e. properties which are not pairs are substituted with pairs where the second element of each is true.The call fails with a function_clause if Proplist is not a list.Example: erl&gt; kvs:proplist_to_map([a, {b, 2}]). \#{a =&gt; true,b =&gt; 2} erl&gt; kvs:proplist_to_map(a). ** exception error: no function clause matching kvs:proplist_to_map(a) (/Users/erszcz/work/erszcz/kvs/src/kvs.erl, line 125)","ref":"kvs.html#proplist_to_map/1","title":"kvs.proplist_to_map/1","type":"function"},{"doc":"An Elixir-compatible keyword list. A list of pairs in which the first item (the key) is an atom.","ref":"kvs.html#t:keyword/0","title":"kvs.keyword/0","type":"type"},{"doc":"An Elixir-compatible keyword list. A list of pairs in which the first item (the key) is an atom and the second item is of type V.","ref":"kvs.html#t:keyword/1","title":"kvs.keyword/1","type":"type"},{"doc":"The default kvs type - a list of key-value pairs.","ref":"kvs.html#t:t/0","title":"kvs.t/0","type":"type"},{"doc":"A list of key-value pairs, where the keys are of type K and values are of type V.","ref":"kvs.html#t:t/2","title":"kvs.t/2","type":"type"}]