searchNodes=[{"doc":"","ref":"kvs.html","title":"kvs","type":"module"},{"doc":"Unfolds a Proplist into a list of key-value pairs. Properties which are not pairs are substituted with pairs where the second element of each is true. The call fails with a function_clause if Proplist is not a list.","ref":"kvs.html#from_proplist/1","title":"kvs.from_proplist/1","type":"function"},{"doc":"Returns the Value associated with Key if KVs contains Key. The call fails with a {badkey, Key} exception if no value is associated with Key, or with a function_clause if KVs is not a list. Example: > kvs:get(a, [{a, 3}]). 3 > kvs:get(z, [{a, 3}]). ** exception error: {badkey,z} in function kvs:get/2 called as kvs:get(z,[{a,3}])","ref":"kvs.html#get/2","title":"kvs.get/2","type":"function"},{"doc":"Returns Value associated with Key if KVs contains Key. If no value is associated with Key, Default is returned. The call fails with a function_clause if KVs is not a list. Example: > kvs:get(a, [{a, \"Just a\"}], \"Default value\"). \"Just a\" > kvs:get(z, [{a, \"Just a\"}], \"Default value\"). \"Default value\"","ref":"kvs.html#get/3","title":"kvs.get/3","type":"function"},{"doc":"Returns a map built from Proplist. The proplist is first unfolded, i.e. properties which are not pairs are substituted with pairs where the second element of each is true. The call fails with a function_clause if Proplist is not a list.","ref":"kvs.html#proplist_to_map/1","title":"kvs.proplist_to_map/1","type":"function"},{"doc":"An Elixir-compatible keyword list. A list of pairs in which the first item (the key) is an atom.","ref":"kvs.html#t:keyword/0","title":"kvs.keyword/0","type":"type"},{"doc":"The default kvs type - a list of key-value pairs.","ref":"kvs.html#t:t/0","title":"kvs.t/0","type":"type"}]